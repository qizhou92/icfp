unfoldLeftEdge ::UnfoldPair -> T.CoreExpr -> T.CoreExpr -> UnfoldState UnfoldEdge
unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.EBin ob e3 e4) e2 = do
  pair1 <- constructUnfoldPair contextV freeV1 freeV2 e3 e2
  pair2 <- constructUnfoldPair contextV freeV1 freeV2 e4 e2
  buildBinaryConstrainsLeft ob pair1 pair2 pair
  return (UnfoldEdge UnfoldLeft [pair1,pair2])

unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.EIf e3 e4 e5) e2 = do
  pair1@(UnfoldPair _ expressionV1 _ _ _ _ id1 _) <- constructUnfoldPair contextV freeV1 freeV2 e3 c2
  contextForTrue  <- buildContextForTrue expressionV1 freeV1 freeV2 e2 id1
  contextForFalse <- buildContextForFalse expressionV1 freeV1 freeV2 e2 id1  
  pair2 <- constructUnfoldPair contextForTrue freeV1 freeV2 e4 e2
  pair3 <- constructUnfoldPair contextForFalse freeV1 freeV2 e5 e2
  buildIfStConstrainsLeft pair2 pair3 pair
  return (UnfoldEdge UnfoldLeft [pair1,pair2,pair3])

unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.EMatch e3 e4 v1 v2 e5) e2 = do
  pair1@(UnfoldPair _ expressionV1 _ _ _ _ id1 _) <- constructUnfoldPair contextV freeV1 freeV2 e3 c2
  contextForLeft <- buildContextForLeft expressionV1 freeV1 freeV2 e1 e2 id1
  contextForRight <- buildContextForRight expressionV1 v1 v2 freeV1 freeV2 e1 e2 id1
  pair2 <- constructUnfoldPair contextForLeft freeV1 freeV2 e4 e2
  pair3 <- constructUnfoldPair contextForRight (updateFreeList [v1,v2] freeV1) freeV2 e5 e2
  buildMatchConstrainsLeft pair2 pair3 pair1
  return (UnfoldEdge UnfoldLeft [pair1,pair2,pair3])

unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.ECon e3 e4) e2 = do
  pair1 <- constructUnfoldPair contextV freeV1 freeV2 e3 e2
  pair2 <- constructUnfoldPair contextV freeV1 freeV2 e4 e2
  buildConConstrainsLeft pair1 pair2 pair
  return (UnfoldEdge UnfoldLeft [pair1,pair2])

unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.EApp e3 e4) e2 = do
  pair1@(UnfoldPair _ expressionV1 _ _ _ _ id1 _) <- constructUnfoldPair contextV freeV1 freeV2 e3 e2
  pair2@(UnfoldPair _ expressionV2 _ _ _ _ id2 _) <- constructUnfoldPair contextV freeV1 freeV2 e4 e2
  buildArgsConstrainsLeft pair1 pair2
  buildAppConstrains pair1 pair2 pair
  return (UnfoldEdge UnfoldLeft [pair1,pair2])

unfoldLeftEdge pair@(UnfoldPair contextV expressionV _ freeV1 freeV2 id0 _) e1@(CoreExpr.ELam v e3) e2 = do
  newContext <- buildLamContext contextV v freeV1 freeV2 
  pair1 <- constructUnfoldPair newContext (updateFreeList [v] freeV1) freeV2 e3 e2
  buildLamConstrains v pair1 pair
  return (UnfoldEdge UnfoldLeft [pair1])

unfoldLeftEdge e1 e2 = return (UnfoldEdge UnfoldLeft [])